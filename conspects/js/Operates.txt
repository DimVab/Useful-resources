1. Операнды - то, с чем работают операторы (левый операнд, правый операнд)

2. Конкатенация - сложение строк
-Сложение строк приводит к склейке ("3"+"3"="33")("A"+"B"="AB")
-По правилам JS, если сложить строку с числом, то ошибки не будет. JS посчитает это как сложение двух строк (2 + "2" = "22")
-Также можно сложить число или строку с переменной (переменная без кавычек)

2.1 Операторы JS.
+   - конкатенация (склеивание) со строками и сложение с числами
* при сложении строки с числом получается строка
++  - инкримент - увеличение на 1
--  - декримент - уменьшение на 1
Префиксная форма записи - инкримент или декримент стоят перед данными
Постфиксная форма записи - инкримент или декримент стоят после данных
При префиксной записи console.log(++peremennaya); в консоль выдаётся запись как должно быть
При постфиксной записи console.log(peremennaya++); в консоль выдаётся старое значение, но результат оператора запоминается в системе
> , < , >= , <=
% - возвращает остаток от деления (console.log(5%2)); - будет 1
=     - присваивание
==    - равенство        (console.log(2*4 == 8);   - будет true
можно сравнивать числа и строки(с числом), и это будет считаться как сравнение чисел
===   - строгое равенство - то же самое, но сравнивать можно только одни типы данных (иначе будет false)

&& - и   - выдаёт true когда ВСЕ выражения являются правдивыми (выполняются одновременно). Можно использовать более чем с 2 аргументами
Если среди условий все правднвые, то оператор вернёт последнее из них
Если среди условий есть ложные, оператор вернёт первое ложное

|| - или -  выдаёт true когда один из вариантов правдивый (но не два ложных). Можно использовать и более чем с 2 аргументами
Так тоже можно: let condition =  0 || NaN || 'строка' || false; (будет condition = 'строка')
Записывается значение первого истинного условия
function howDoYouDo(answer) {
    const result = answer || 'да ничего';
    return result;
} (выдаст ответ, если будет либо 'да ничего', если пустой ответ)

! - отрицание (НЕ) (возвращает обратное значение: правду в ложь, ложь в правду) *[ставится перед переменной: !peremennaya]
!(pass === password), !(3 > 2)
*если поставить ! перед небулевым значением, JS сначала приведёт тип к булю (неявное преобразование), а затем заменит значение на противоположное
!'Непустая строка' // false 

!! - двойное отрицание - переводит значение в логический тип: !!''; // false

!=     - не равно (2 + 2 != 5); - будет true
!==    - строгое не равно (по типу данных)
побитовые операторы (????) (для более углублённого изучения)
** - возведение в степень
+=    - добавочное присваивание (присваивание со сложением)
-=
*=
/=

2.2 Порядок выполнения операторов: как в математике
(есть таблица операторов по приоритету)

Среди логических опреаторов:
сначала НЕ, потом И, затем ИЛИ
Операции в скобках имеют приоритет

