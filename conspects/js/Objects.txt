	Объекты

Ключ
Значение
Свойство
Метод

Темы:
- понятие и структура объектов (основы);
- обращение к объекту, вложенные объекты;
- изменение объекта;
- свойства и методы, создание метода;
- перебор элементов (ключей);
- подсчёт элементов (ключей);
- деструктуризация объекта.


10. объект - структура данных, в которой собраны разнородные типы данных (числа, строки, массивы, другие объекты, функции).
Создаётся фигурными скобками
свойства объекта - состоят из ключа (имени) и значения (данных) по этому ключу
свойства-акцессоры: get и set (???)

объявление объекта:
let user = {
    name: 'Дмитрий',		(после значений пишется запятая)
    dotaLevel: 25,
    dogName: 'Нахабино'	    (после последнего значения ничего не пишется)
}; 
обращение к свойству объекта: 
console.log(user.name); (будет Дмитрий)
Можно вставлять объекты внутрь массивов
Объекты мб вложенными
*функция внутри объекта - метод, его вызывают
 все остальные типы данных объекта - свойства, к ним получают доступ

Получение доступа к свойству:
object.property1;
object['property1'];

Вызов метода:
object.method();

Новое свойство можно записывать так:
object1.property1 = '...';


Если переменная - коробка, то объект - ящик с полками


14. Объекты. Объекты содержат данные - свойства и действия - методы. По сути объекты - ключевая единица JS, в которой хранится разнообразная информация.
Свойства записываются в формате "ключ-значение" (в отличии от массивов, где порядковый номер и значение)
const obj = {
  name: "John",
  age: 25,
  isMarried: false
};
Обращение к свойству объекта/записывание новых свойств:
console.log(obj.name); - мы обращаемся к свойству name объекта obj
console.log(obj["name"]); - другой способ обращения к св-ву объекта (Иван Петриченко советует второй способ, тк в первом мб проблемы при кириллице и пробелах)
* (вот здесь я не очень понял, тк в некоторых случаях можно выводить в [] без кавычек, а в некоторых - с кавычками)   (?????)
Я так понял, что название ключа пишется с кавычками, а название переменной - без кавычек

console.log(options['option3']['option3.2']); - обращение к ключу внутри ключа объекта

Объекты можно создать такими способами:
1)   const obj = new Object();
2)   const options = {
	option1: ...,
	option2: ...,
	obtion3: {	    (внутри объекта может быть вложенный объект)
	    option3.1: ...,
	    option3.2: ...
	}
};

* объект - в любом случае изменяемая переменная, даже если создаётся с помощью const (те в него можно добавлять новые элементы, убирать имеющиеся)

10.1 Перебор всех свойств объекта - конструкция for in
for (let key in options) {
	console.log(Key, options[Key]); 
}
Здесь задаётся переменная (Key) для обозначения каждого свойства (ключа) и указывается объект (options). Таким образов for in перебирает каждый ключ 1 раз
В console.log вместо Key в каждом тике будет выводиться название ключа, а вместо options[Key] - свойство
- Все выводимые значения имеют тип данных "строка", поэтому если выведется объект внутри объекта - в консоли будет просто запись object


Подсчитывать кол-во свойств (ключей) можно:
1) через цикл с переменной++
2) через метод над объектом и свойством над массивом
console.log(Object.keys(options).length);

10.2  Создание метода
const options = {
	option1: ...,
	option2: function() {
	...;
    }
}
options.option2();    - запуск метода


Деструктуризация объекта
Разделение объекта на несколько элементов для удобства работы с ним
const {option3.1, option3.2} = options.option3;
в фигурных скобках пишутся переменные (ключи), которые нужно вытащить, а после = пишется объект и ключ, из которого нужно вытащить

теперь можно делать более короткую запись:
console.log(option3.1);  вместо   console.log(option3.option3.1);
