Свойства объектов:

1. Элементы DOM:

1.1) .style.color = '...' - задать свойство

1.2) .className - получить название класса (или классов) или перезаписать (= '...')

1.3) .classList - получить список всех классов элемента (+ имеет свои методы)

1.4) .innerHTML - выведет наполнение элемента либо заменит наполнение (= '...') либо добавит наполнение (+= '...')

1.5) .textContent - получить или перезаписать текстовое содержимое элемента

1.6) .innerText - тоже показывет текстовое содержимое, но не выведет элементы со св-вом display: none)

1.7) .insertAdjacentHTML('_место_', '_html_') - вставка html строки
вместо места мб поставлены:
- beforebegin - до открывающего тэга
- beforeend - перед закрывающим тэгом
- afterbegin - после открывающего тэга
- afterend - после закрывающего тэга

1.8) .insertAdjacentText() - то же самое

1.9) .value - значение поля ввода

1.10) .checked - отмечены или нет чекбоксы и радиокнопки: true or false

1.11) .content - получить содержимое элемента

1.12) .children - получить псевдомассив дочерних элементов
1.13) .parentElement - ссылка на родительский элемент
1.14) .firstElementChild
1.15) .lastElementChild - последний дочерний элемент (если нет, то null)
1.16) .previousElementSibling - предыдущий соседний элемент
1.17) .nextElementSibling - следующий соседний элемент

2. Объект event

2.1) event.target - выбранный элемент, на котором сработало событие

Методы объектов

0. Общие

0.1) .keys() - создаёт массив из св-в объекта (ключей)

1. Console

1.1) console.log()

1.2) console.dir() - отразит список св-в и методов переданного объекта

2. Элементы DOM

2.1) element.addEventListener (eventName, handler)

element - элемент, которому добавляем слушаетль
eventName - событие, на которое нужно отреагировать ('click' / 'scroll' / 'mouseover' / 'submit' / 'mouseout')
handler - callback-функция-обработчик события (вызывается, когда событие сработает) (пишется без скобок)

2.2) evt.preventDefaulf() - отменить стандартное событие отправки формы и перезагрузки страницы

2.3) .querySelector('selector') - выбор DOM-элемента (первого попавшегося); selector мб тэгом, класссом ('.class'), id ('#id')
можно искать по вложенным селекторам

2.4) .querySelectorAll('selector') - выбор псевдомассива элементов с переданным селектором; можно выбрать элемент по индексу [i]

2.5) .getElementById - получить элемент по идентификатору
2.6) .getElementByClassName - получить элемент по имени класса
2.7) .getElementByTagName - получить элемент по имени тэга
*здесь не нужно писать знаки . и #; используются очень редко

2.8) .getAttribute('имя_атрибута')  - получить значение атрибута: значение, null или пустая строка

2.9) .hasAttribute('имя_атрибута') - есть ли у тэга заданный атрибут: true or false

2.10) .setAttribute('имя_атрибута', 'значение') - задать атрибут; если значения нет (disabled), то написать в значении можно что угодно
здесь можно прописывать css-св-ва атрибутом 'style'

2.11) .removeAttribute('имя_атрибута) - удалить атрибут

2.12) .classList.contains('...') - проверяет, есть ли у элемента класс, переданный как аргумент (true or false)

2.13) .classList.add('...') - добавляет элементу класс

2.14) .classList.remove('...') - удаляет у элемента класс

2.15) .classList.toggle('...') - добавляет или удаляет у элемента класс, в зависимости от того, есть он или нет


2.15) .append() - добавить в начало
2.16) .prepend() - добавить в конец
2.17) .before() - добавить до
2.18) .after() - добавить после
2.19) .replaceWith() - заменить один элемент на другой
можно писать несколько аргументов - добавятся несколько элементов; можно в качестве аргументов записать массив

2.20) .remove() - удалить

2.21) .closest('...') - выбрать близжайший родительский элемент с переданным селектором

2.22) .cloneNode(true/false) - скопировать элемент вместе с содержимым (true) или без содержимого (false); для вставки потом использовать .append и тп