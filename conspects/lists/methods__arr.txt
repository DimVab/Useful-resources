Свойства:

.length - длинна массива (кол-во элементов)
(также можно использовать для определения последнего элемента массива [.length - 1])


Методы:
0) Array.form(_arr1_) - преобразовать псевдомассив в массив

1) .concat('...') - добавить элемент в массив (в аргументе мб и другой массив)

2) .join(разделитель) - преобразовать в строку (если аргумент пустой, элементы будут перечисленны через запятую)

2.1) .split(разделитель) - преобразование строки в массив (разделитель - символ, по которому строка разделяется на элементы массива)

3) .push('...') - добавить элемент в конец
4) .pop() - удалить последний элемент (без аргумента; в консоли выведется удалённый аргумент)
5) .shift() - удалить первый элемент массива (в консоли выведется удалённый элемент)
6) .upshift('...') - добавить элемент в начало массива (в консоли выведет, сколько элементов в новом массиве)

*обычно добавляют и удаляют в конце, тк не нужно менять индексы другим элементам

7) .slice(n1, n2) - вырезать часть массива; n1 - начало (включительно), n2 - конец (не включительно); создаётся новый массив
если не указать 2-й аргумент, то массив вырезается до конца; можно указать отрицательные числа (будет считаться с конца)(счёт начиенается с -1)
можно вызвать без аргументов, тогда получится такой же массив

8) .splice (n1, n2, '...') - вырезать часть элементов и заменить другими
n1 - начало вырезки, n2 - кол-во элементов на удаление, 3-й аргумент - элементы, которые вставляются вместо удалённых
- в консоль выведутся удалённые элементы
старый массив изменится
- можно ничего не добавлять, тогда просто удалятся элементы
- можно ничего не удалять, тогда просто добавятся элементы, начиная с n1

9) .forEach(func(item)) - обход массива; функция в аргументе вызывается на каждом элементе поочерёдно, изменяя старый массив
- то же самое, что цикл for
- нельзя использовать директивы continue и break

10) .map(func(item)) - создание одного массива из другого (старый преобразуется с помощью фукнкции)
- обязательно написать в функции return (инача будет undefined)
- не применяется к псевдомассивам

* callback-функция методов .forEach(),  .map(), .filter() может иметь 3 аргумента:
- текущий элемент массива (item)
- индекс текущего элемента (index)
- исходный массив (array)

11) .filter(func) - отсеивает элементы массива по заданному условию
- функция возвращает true/false в зависимости от условий (обязательно писать return)
- в итоге содаётся новый массив из элементов, для которых функция-фильтр вернула true

12) .includes('...') - проверяет содержимое на наличие указанного в скобках; возвращает true/false

13) .endsWith('...')
14) .startsWith('...') - проверяет, начинается ли с указанных символов

15) .some(func()) - проверяет, есть ли хотя бы один элемент, который соответствует условию в коллбэке; возвращает true/false
- проверка прекращается, если найден первый удовлетворяющий условиям элемент (оставшиеся не проверяются)

16) .find(func()) - возвращает значение элемента, на котором он завершил проверку
- прекращает перебор после того, как найдёт первое значение true

17) .every(func()) - проверяет все элементы массива и возвращает true, если все элементы прошли проверку

18) .reduce(func(previousValue, ... ), начальное значение) - сведение массива; перебирает элементы массива и приводит их к итоговому значению (числу, массиву или обхектку)

1-й аргумент - previousValue - промежуточное значение, равное тому, что в прошлой итерации вернул коллбэк
- остальные 3 аргумента как в других функциях

2-й аргумент reduce - начальное значение

19) .sort() - сортировка массива
- мб без аргумента, тогда сортировка будет по возрастанию цифр (не в логическом порядке, а как строки)
- в аргументе мб callback-функция с 2 аргументами (func(a, b), которые сравниваются в теле функции (return a - b)

20) .localeCompare() - сравнение строк