Grid Layout - система построения сетки в двух пространствах (по горизонтали и вертикали)

Преимущество перед flexbox:
1) меньшее кол-во кода, не нужны обёртки
2) описывает сетку по 2-м осям
3) проще делать адаптивные сайты

Флексбоксы отталкиваются от контента (для выравнивания в строке или колонке)
Грид ориентированны на структуру (где нужна чёткая структура, нарпимер, общая сетка страницы)

1.

display: grid - элемент становится грид-контейнером. При этом ведёт себя как блок

По умолчанию элементы занимают один столбец и всю строку

display: inline-grid - грид-контейнер ведёт себя как строчный элемент и занимает тоолько то пространство, которое необходимо для грид-элементов

2. Понятия:

Грид-линии - горизонтальные и вертикальные невидимые линии, которые, пересекаясь, создаюь строки и колонки
Нумерация от 1

Результат пересечения грид-линий:
грид-колонки
грид-строки (grid tracks)

грид-ячейки (grid cells)\


3. Создание сетки

св-ва:
grid-template-columnd
grid-template-rows

в значениях перечисляются ширина/высота ячеек (без запятой) (сколько перечислений, столько колонок/строк)

пример:
grid-template-columns: 100px 100px 150px;
grid-template-rows: 150px 150px 100px;
по 3 колонки и строки

По умолчанию заполнение ячеек слева направо сверху вниз

Если элементов будет больше, они продолжат выстраиваться по этому же принципу. Но в таком случае появятся неявные ячейки, состоящие из новых строк и колонок. То есть ячейки, которые мы не задавали с помощью свойств. Грид создаёт их сам. По умолчанию неявные ячейки имеют значение auto. Если у них не будет явной ширины за счёт контента, CSS-свойств или свободного пространства, то они схлопнутся.

Размеры задаются в px, %, auto, fr.
При значении auto размер грид-полос подстраивается под размер грид-элементов, так, чтобы уместился самый большой из них. Другие элементы поделят между собой оставшееся пространство.


4. Создание отступов
Свойство gap (можно grid-gap) - создаёт зазоры между строками и колонками (но не между крайними элементами и контейнером)

column-gap - отступы для колонок
row-gap - отступы для строк
Можно их указать в gap: 10px 20px; (сначала отступы между строками, затем между колонками)

5. Функция repeat:
grid-template-columns/rows можно записать короче, задав функцию repeat():
repeat(n, nn%), где n - кол-во колонок/строк, а nn - ширина колонки/строки

grid-template-columns: repeat(5, 20%); вместо (20% 20% 20% 20% 20%)

* можно комбинировать repeat и фиксированные значения:
grid-template-columns: repeat(5, auto) 200px;

6. Единица измерения fr (фракция)
Если других фракций нет, то занимает всё свободное пространство
Если есть другие фракции, пространство расчитывается так: n-fr будет занимать место пропорционально его коэффициенту от общей суммы fr
Если 2 ячейки занимают 2fr и 3fr, то первая будет занимать 40%, а вторая - 60% пространства

Отступы учитываются автоматически при расчёте
Не нужно проводить доп. вычислений

Пример комбинации с фракциями:
grid-template-columns: repeat(4, 1fr) 2fr 200px;


7. Расположение элементов в grid-контейнере

Можно указать, где грид-элементу начинаться, а где заканчиваться с помощью св-в:
grid-cloumn-start
grid-cloumn-end
grid-row-start
grid-row-end

Применяются непосредственно к элементу
(например к псевдоклассу :nth-child(n) )

grid-column-start: 1;
grid-column-end: 3;

Здесь элемент будет занимать 2 ячейки (т.к. всего 4 вертикальных линии) (1-я лииня - начало 1-й ячейки, 2-я линия - конец 1-й ячейки и начало 2-й ячейки, 3-я линия - конец 2-й ячкйки и начало 3-й ячейки)

  grid-column-start: 1;
  grid-column-end: 3;
  grid-row-start: 1;
  grid-row-end: 6;

Здесь элемент будет занимать 10 ячеек (2 по горизонтали * 5 по вертикали)

Остальные элементы подстраиваются под новые условия

7.1 Можно отсчитывать справа-налево. Тогда нумерация начинается с -1 (отрицательные ). Пример:

  grid-column-start: -1;
  grid-column-end: -3;
  grid-row-start: 1;
  grid-row-end: 6;

7.2 Сокращённая запись:

grid-row: 1; (по умолчанию если указать одно значение, второе станет auto и займёт 1 ячейку)

grid-column: 2/4 (начало со 2-й колонки, конец на 4-й)

Линиям можно давать имена, чтобы каждый раз их не считать. Цифровые назнвания при этом останутся доступны. 
Имена линиям указываются в квадратных скобках на этапе создания строк и столбцов
Пример:

grid-template-rows: [aside-start] 300px [aside-end];

grid-row: aside-start / 4;

Ключевое слово span указывает, какое кол-во строк или столбцов должен занимать элемент до или после какой-то линии

Если не указывать начало элемента, по умолчанию он начнётся с той линии, на которой расположен изначально

grid-column: span 2;
grid-row: span 2; 

Элемент займёт 2 колонки и 2 строки, начиная по умолчинию

7.3 Отрицательные числа и сокращённая запись:

Можно комбинировать положительные и отрицательные числа

  grid-column: 6/-1; (c 6-й по последнюю колонки)
  grid-row: 1/-1; (с первой по последнюю строки)


8. Грид-области
Свойство grid-template-areas
Задаётся контейнеру, значения - список с именами областей

Имя даётся такое, чтобы отражать значение содержимого
В пустой области ставится точка или несколько точек

Пример:
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, 1fr);
  grid-template-areas:
  "header header header"
  "news news aside"
  "promo promo aside"
  ". footer footer";

Свойство grid-area задаётся элементу и указывает на область, в которой он должен поместиться

.header {
  grid-area: header;
} 

НО: грид-облатсь обяз дб прямоугольником;
можно создать только одну область для каждого имени (разъединить нельзя)