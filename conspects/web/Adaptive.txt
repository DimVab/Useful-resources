Адаптивная вёрстка

1. Адаптивность с помощью величин и размеров

св-ва:
min-width (до какого предела будут сжиматься элементы)
max-width (до какого предела могут рассширяться страница или элементы)
min-height
max-height

величины:
% - отталкиваются от величины родительского элемента
для высоты рекоментуется применять только во flex-контейнере или когда высота родителя явно задана

vw, wh - % от размера окна браузера (включая полосу скролла и в мобильных устройствах - вспомогательные элементы навигации)
* иногда при использовании 100vh, 100vw может образоваться доп область прокрутки (и тогда лучше подойдут %)

vmin
vmax - % от ширины или высоты браузера, в зависимости что больше


2. Ф-ция calc()
Служит для расчёта размеров
Можно производить вычисления с комбинациями абсолютных и относительных величин

может выполять 4 операции: +-*/
Пример:
height: calc((100vh + 300px)/2);

* плюс и минус обязательно отделять пробелами
умножение и вычитание не обязательно

Варианты применения:
- одна колонка имеет фиксированную ширину, а остальные — резиновые. Такое часто встречается на сайтах с рекламными баннерами на полях.
- сами колонки растягиваются, а расстояние между ними фиксированное.
- дочерний элемент ýже родительского на фиксированное количество пикселей.


3. 
Отступы margin и padding можно задать в %
% расчитываются от ширины родителя (даже вертикальные отступы)

Для создания резиновых квадратных изображений следует использовать св-во padding-bottom: 100%;
Тогда изначальная высота будет 0, а изображение растянется из-за padding
(при условии что width тоже = 100%)


4. Резиновые шрифты
Единицы измерения: 

em - высчитывает размер шрифта относительно размера шрифта родительского элемента

rem (root em) - размер шрифта относительно размера шрифта корневого объекта - тэга <html> (по умолч 16px)
Но тэгу html можно задать другой размер и тогда rem будет измеряться относительно него

Этими единицами можно измерять отступы и межстрочные и межбуквенные растояния

*высоту строки можно указать просто дробным числом (напр 1.15)


5. Изображения
Растровые:
-jpg
-png
-gif

Векторные:
-svg

Растровые изображения на мониторах с более высоким разрешением сжимаются. Соответственно увеличение их до нормального размера делает картинки менее чёткими

Поэтому растровые изображения следует готовить сразу в двойном размере — так они будут хорошо смотреться на любом экране


Векторные изображения используются для иконок и логотипов

Обычно файл в формате .svg создают в векторных графических редакторах, таких как Sketch, Adobe Illustrator или Figma

svg-графикой можно управлять в css и js

Оптимизировать svg можно через сервис SVGOMG

Файл в формате .svg можно поместить на страницу так:
1) через атрибут src тега img;
2) через свойство background-image в CSS;
3) как iframe;
4) через атрибут src тега <embed>;
5) через атрибут data тега <object>;
6) вставив код svg-файла в HTML.

-Первыми 2 способами невозможно преобразовать изображение через css и js
-3, 4 cпособы не применяются на практике
-Тэг <object> поддерживается только в браузере Edge
-самый оптимальный путь - вставлять код прямо в html (если нужно преобразовывать формулы)
*но если не требуется преобразовывать, то можно вставлять как изображение

Код вставляется с помощью тэга <svg><path/></svg>


6. Оптимизация шрифтов
Производители программного обеспечения прибегают к разным способам сглаживания шрифтов. Поэтому в разных ОС и браузерах шрифты могут различаться

Для Веба рекомендуется использовать шрифты формата woff
В него можно сконвертировать другой формат

Сглаживание шрифтов:
Работает с вендорными префиксами
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;


Подгонка размера текста:

При изменении масштаба страницы размер шрифта будет изменяться пропорционально (!!!)
-webkit-text-size-adjust: 100%;
-ms-text-size-adjust: 100%;
-moz-text-size-adjust: 100%; 

Рендеринг:
Кёрнинг - выборочное изменение расстояния между буквами, чтобы они лучше смотрелись рядом
В шрифт добавляют таблицу кёрнинговых пар, где указано, между какими парами расстояние сокращается или увеличивается

Лигатуры - знаки, образованные слиянием символов (њ, љ, œ, æ) редко исп в русском языке

Рендеринг (отрисовка с англ) - процесс отрисовки на экране. Настройка рендеринга шрифта определяет, нужно ли применять к тексту кёрнинг и лигатуры
св-во text-rendering: optimizeLegibility; (оптимизировать читаемость - с англ) - кёрнинг и лигатуры дб отрисованы
* НО такая настройка сильно замедлит рендеринг страницы в целом

text-rendering: auto (по умолчанию)

Чтобы не нагружать сильно систему, рекомендуется применять кёрнинг и лигатуры только в заголовке


7. Метатэги корректного масштабирования страницы

метатэг videwport:
<meta name="viewport" content="width=device-width, initial-scale=1"> 

Значения атрибута content:
(отношения между размерами веб-страницы и устройством, на котором открыт сайт)
1) width - размер окна просмотра (в px либо width=device-width - привязать к ширине экрана, на котором открыт сайт)
2) height - в px или height=device-height (исп редко)
3) initial-scale - масштабирование при загрузке (изначальный %, который принимает vh и vw). Масштаб страницы
4) maximum-scale - верхняя граница масштабирования
5) minimum0scale - нижняя граница масштабирования
6) user-scalabable - возможность пользовательского масштабирования (значения yes, no) 


8. Медиазапросы (media queries)

специфика взаимодействия с сайтом на мобильных устройствах:
- нет состояния наведения мыши;
- вместо щелчка мышью пользователь касается экрана;
- мелкий текст сложно разобрать;
- в малые элементы сложно попасть пальцем;
дизайн в целом воспринимается иначе — - отличный десктопный интерфейс может быть плохим для телефона.

Медиазапросы - директивы CSS, которые позволяют прописать элементу сразу несколько вариантов отображения и выбирать внешний вид в зависимости от выполнения заданных условий

Синтаксис:
@media <условие_1> and <условие_2> {
        <селектор> {
            <свойство>: <значение>;
        }
} 

Размещают медиазапросы обычно в конце CSS-кода. Каждому режиму отображения — свой медиазапрос.

 Если проект верстается по БЭМ, медиазапросы прописываются по отдельности — для каждого компонента в конце его файла стилей, для блоков, элементов и модификаторов в их CSS-файлах. Если же стили группируются по типу, то в конце общего CSS-файла

Виды условий:
all - все типы устройств
screen - экраны мониторов

@media screen {
    body {
        font-family: 'Times New Roman';
    }
} 


Обычно также прописывают минимальные ширину и высоту. 
Дополнительные условия присоединяются ключевым словом and . Стили такого запроса будут применяться, если сайт открыт с экрана, чьё разрешение находится в этой «вилке».

@media screen and (max-width: 720px) {
    body {
        background-color: red;
    }
} 

8.1 Подходы к построению медиазапросов

Обычно медиазапросов пишут много, чтобы определить поведение элементов для большинства современных устройств. Их много и появляются всё новые, поэтому нельзя написать универсальный набор медиазапросов для каждого существующего устройства.

Их сортируют по ширине и относят к одной из групп:
маленькие смартфоны,
широкие смартфоны,
планшеты,
малые настольные компьютеры и ноутбуки,
средние настольные компьютеры и ноутбуки,
большие мониторы,
очень большие мониторы

Обычно базовый макет ориентирован на средний ноутбук с разрешением дисплея от 1024 до 1440 пикселей

Обычно пишут следующие @media:
/* Основной код для разрешения 1024px */
@media screen and (min-width: 2560px) {
    /* стили для больших мониторов с разрешением 4K */
}
@media screen and (min-width: 1440px) {
    /* стили для больших настольных компьютеров и ноутбуков */
}
@media screen and (max-width: 1024px) {
    /* стили для планшета в альбомной ориентации */
}
@media screen and (max-width: 768px) {
    /* стили для планшета */
}
@media screen and (max-width: 425px) {
    /* стили для широкого смартфона */
}
@media screen and (max-width: 375px) {
    /* стили для среднего смартфона */
}
@media screen and (max-width: 320px) {
    /* стили для малого смартфона */
} 


Писать стили следует от более общего к более частному, от большего к меньшему

Также есть условие ориентации устройств:
orientation: portrait/landscape
Но оно работает не во всех браузерах, поэтому лучше прописывать самому минимальную/максимальную ширину:

@media screen and (max-width: 568px) and (max-height: 320px) {
    /* стили для iphone 5 */
} 