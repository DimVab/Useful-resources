0. В начале документа полезно задавать общие свойства:
margin: 0; padding: 0; box-sizing: border-box; font-family:....
Это если не используется normalize.css

1. Центрирование по горизонтали:
1) text-align: center - центрирование текста внутри блока
2) margin: 0 auto - для блочных и блочно-строчных элементов
3) justify-content: center (flex)

2. По умолчанию между строчными и блочно-строчными элементами есть отступ. Он убирается, если задать размер шрифта элементу: 0 (font-size:0). (но текст пропадёт)
Либо line-height: 0 (но текст прибъётся к низу)
Либо vertical-align: middle, bottom, text-bottom, text-top
Либо: display: root
Либо overflay: auto
Либо: display: flex - лучший вариант

3. Центрирование по вертикали: с помощью Flexbox
1) display: flex; - для родительского элемента (коробки)
margin: auto; - для дочернего элемента (содержимого)
2) vertical-align: center
3) align-items: center (flex)

4. box-sizing: content-box и border-box расширяет границу или делает конечный размер неизменным.

5. Полезно использовать normalize.css, вставив его в html выше style.css

6. Если неизвестно, сколько места будет занимать элемент в контейнере, полезно задавать контейнеру не высоту, а минимальную высоту (min-height)

7. Якорная ссылка - ссылка на конкретный объект, который может находиться на той же странице или на другой

8. position: absolute
   left: 100% 
Это используется для тултипов (подс
казок), которые находятся сбоку от блока

9. height: 100% - блок растянется на всю высоту экрана
min-height и min-width выгоднее height и width тем, что контент будет растягиваться в зависимости от наполнения
height: n% и width: n% у дочернего элемента будут на n% от родительского

10. Треугольник в CSS:
display: block;
width: 0;
height: 0;
border: 20px solid transparent;
border-top(/bottom/right/left)-color: #red;

направление в зависимости от border-top-color

11. Overflow: hidden полезен, когда нужно ограничить область, поместить в неё что-то, а затем скрыть границу

12. Иногда, когда 2 элемента с размерами по 50% не влезают, полезно установить размер шрифта: 0 родительскому элементу

13. Можно сделать прямоугольник/квадрат, задав элементу width и padding (pading-bottom)

14. Если между блоками есть зазор (скорее всего у display: inline-block, тк они имеют размер шрифта), то им следует обнулить шрифт

15. Шрифту можно прописывать значение в vw, чтобы он был адаптивным (но на больших экранах, он будет огромным, поэтому лучше так делать только в @media)

16. Чтобы выявить горизонтальный скролл, можно задать всем блокам цветную границу (через *), чтобы было видно, какой блок выходит за границу

Блоки следует проверять переполнением (не будут ли вылезать элементы или теснить другие)

17. Для блоков, включая page/root пишутся и min-width и max-width и width: 100%
Тогда он будет занимать всё доступное пространство в пределе ограничений min-width и max-width

У блоков по стандарту max-width: 100% и дополнительно писать её не обязательно
(* но лучше проверять в некоторых случаях)