Адаптивность делается с помощью:
- fr
- minmax();
- fit-contet();


1. Размеры неявных строк и колонок

Неявные треки - треки (ячейки), которые появляются автоматически, если элементов в контейнере больше, чем ячеек в явно заданных строках и столбцах св-вами grid-template-rows/columns из-за добавления новых элементов

Неявные треки по умолчанию отталкиваются от размеров содержимого в них

Для регулирования размеров неявных строк и столбцов существуют св-ва:
grid-auto-rows (высота строки)
grid-auto-columns (ширина колонки)

Можно задать несколько значений:
grid-auto-rows: 100px 300px;  
высоты неявных строк будут чередоваться 100px и 300px

2. 
grid-auto-flow - куда будут добавляться неявные треки

grid-auto-flow: row - по умолчанию (будут добавляться строки)
grid-auto-flow: column - будут добавляться столбцы

grid-auto-columns управляет шириной добавляющихся столбцов

grid-auto-flow: dence (плотный, густой, дремучий) - добавляет новые элементы в пустоты, образующиеся из-за grid-template-areas


3. Функция minmax(min, max)
2 параметра с минимальным и максимальным размером
Трек или элемент с таким размером сжимается или растягивается в пределах этих значений

Пример:
grid-template-columns: 1fr 1fr minmax(300px, 1fr);

Значения мб в px, %, fr, min-content, max-content

3.1 Значение max-content
Позволяет вместить элемент полностью без переносов и без свободного пространства по краям (и соответсвтенно растягивает ячейку на эту величину)

Значение min-content - переносит всё, что переносится, чтобы содержимое ячейки занимало как можно меньше места
(ячейка сужается до размеров наибольшего неделимого элемента)

Можно использовать в функции minmax(min-content, max-content) 

4. Функция fit-content(n)
n - верхняя граница размера
Может ужаться до предела, но расшириться больше n не может


5. Значения auto-fill и auto-fit в св-ве grid-template-columns: repeat();
Регулируют автозаполняемость колонок/строк

auto-fill - стремится заполнить колонками всё доступное пространство
Когда элементы заканчиваются, auto-fill создаёт пустые колонки. Их можно увидеть через инспектор в браузере

auto-fit - заполняет всё пространство, но схлопывает пустые колонки и отдаёт больше места под заполненные

можно создавать резиновую вёрстку:
grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
Так колонки не разорвёт от контента: нет жёстких границ, в которые он обязан уместитьсяы


6. Выравнивание. Тут по аналогии с flexbox

justify-items - выравнивание элементов по горизонтали относительно своей ячейки (как justify-content у flexbox). По умолчанию stretch
Значения: start, end, center, stretch, space-around, space-between, space-evenly

align-items - выравнивание элементов по вертикали (или align content?) относительно своей ячейки
Значения как в justify-items

justify-content и aling-content выравнивают всю сетку. Значения те же

6.1
Выравнивание отдельных элементов делается с помощью св-в:
align-self
justify-self


7. Наложение элементов
Если задать группе жлементов одинаковые координаты (грид-области, номера или имена линий), они перекроют друг друга

Если grid-column: 1/4;
     grid-row: 1/2;   совпадают

Здесь работает св-во z-index
Такой способ - временное решение


* Можно раскладывать несколько элементов в 1 ячейке, но давать им разные расположения в ячейке с помощью 2 модификаторов (1 - за общее расположение в грид-сетке, 2 - за расположение внутри ячейки)