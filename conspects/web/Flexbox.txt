Задаётся с помощью display: flex  для родительского элемента
Он становится флекс-контейнером, а вложенные в него дочерние элементы - флекс-элементами

Для дочернего элемента работает margin: auto - элемент расположится по середине как по горизонтали так и по вертикали
(причём расположится по центру в зависимости от размеров экрана)

Несколько элементов автоматически встают в ряд (как строчные и блочно-строчные элементы)

Флекс-элемент внутри флекс-контейнера может сам стать флекс-контейнером для дочерних элементов. При этом наследуются правила только непосредственного родителя

Свойства флекс-контейнера:
flex-directrion: - направление ряда (порядок отображения)
row (по умолчанию)
row-reverse
column (больше для мобильных устройств)
column-reverse

justify-content: - выравнивание вдоль направления ряда (распределение пустот)
flex-start (по умолчанию) - сначала флекс-элементы, затем пустое пространство
flex-end
center - флекс-элементы посередине, а по бокам пустое пространство
space-between - крацие элементы прижаты к краям по горизонтали, а остальные распределены с одинаковыми промежутками
space-around - все элементы распределены с равными отступами, с краёв пустота
space-evenly - все отступы равной величины (почти как space-around, но отступы у границ полные, а не 1/2)

align-items: - выравнивание по поперечному направлению
stretch (по умолчанию) - элементы растягиваются от одного края контейнера к другому (и не нужно дополнительно устанавливать высоту и ширину каждого элемента)
flex-start - элементы прижаты к верхнему краю контейнера (при row) и к левому (при column)
flex-end - наоборот к нижнему краю или к правому
center
baseline - по базовой линии первого по порядку

По умолчанию при уменьшении окна флекс-элементы сжимаются, чтобы поместиться. Это можно изменить с помощью свойства:
flex-wrap: - поведение элементов при сжатии экрана (правила переноса)
nowrap (по умолчанию) - элементы сживаются и не переносятся
wrap - последние элементы при сжатии переходят на новую строчку
wrap-reverse - первые элементы при сжатии переходят на новую строчку

align-content - как поведут себя элементы при переносе на новую строку (работает только при включённом flex-wrap: wrap;). Выравнивает элементы по поперечной оси (второстепенной).
Значения свойств: flex-start, flex-end, center, space-around, space-between, stretch

flex-grow: _(число) - сколько свободного пространства родителя отдаётся элементу. Число - числитель дороби n/10. 
https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-grow-%D0%B2-css-%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-557d406be844 - статья про flex-grow

flex-shrink - обратный принцип
https://medium.com/@stasonmars/%D0%BA%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-flex-shrink-%D0%B2-css-%D0%BF%D0%BE%D0%B4%D1%80%D0%BE%D0%B1%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-c41e40767194

Свойства флекс-элементов:
order: _(число) - определяет порядок в ряду флекс-элементов. Чем выше число, тем раньше элемент в ряду. НО! Если у другого элемента свойства нет, то он будет стоять выше тех, у кого свойство order есть; те, по порядку в html
При этом элемент с order: -1 будет всегда первым в ряду, даже если у других такого свойства нет. (это полезно, если что-либо нужно выставить в первую очередь, главную новость и тп)

align-self: - выравнивание одного флекс-элемента по аналогии с align-items
значения те же самые

flex-basis: _px (число в пикселях) - базовый размер (ширина в ряд или высота в колонну) элемента, пока другие свойства флекс-контейнера не начнут его сжимать или расширять



Приёмы с flex:
1. Если в body задать одному элементу flex-grow: 1, а другому flex-grow: 0, то второй элемент прибъётся к подвалу (это полезно для футеров)