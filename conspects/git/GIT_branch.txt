1. Ветки

1) для работы несколькими разработиками. Каждый будет работать в своей ветке
2) для разработки новых функций, чтобы протестировать отдельно

Основная ветка - main

git branch - просмотр веток
git branch _name_ - создать ветку с именем name
git checkout _name-branch_ - переключиться на другую ветку
git checkout -b _name-branch_ - создать ветку и сразу переключиться на неё

Название ветки лучше выбирать исходя из того, что именно в ней будет происходить.
Имя ветки не должно содержать пробелов — иначе произойдёт ошибка

Если в ветке новая функциональность лучше начинать её имя со слова feature
Если в ветке будет вестись работа по исправлению багов, начинайть её название с bugfix

Примеры названий: feature/header, bugfix/horizontal-scroll

*переключение между ветками изменяет как папки, таки и содержимое файлов


2. Слияние (merge) - объединение одной из рабочих веток с веткой main

1) сначала переключиться на ветку, куда должны попасть изменения
git checkout main
2) git merge _branch-name_

3) git branch -D _branch-name_ - удалить ненужную ветку


3. Деплой - процесс перемещения кода на удалённый сервер называется

по умолчанию GitHub Pages игнорирует файлы, имя которых начинается с нижнего подчёркивания _

эту проблему можно решить, расположив в корне проекта файл с именем .nojekyll

* (все файлы, чьи имена начинаются с точки, скрытые)


У GitHub Pages есть возможность держать финальную версию в ветке main, а выкладывать в интернет из другой ветки. Для этого зарезервировано специальное название для неё — gh-pages. Сайт будет виден по тому же адресу.

Новую ветку нужно указать в настройках «Гитхаба» в разделе ”Source“. Так вы разделите релизную ветку и main. И в ветке main можно будет продолжать улучшать код.



4. Конфликты
посмотреть конфликты можно либо в VSC
либо через git diff

Решение:
удалить вручную неактуальный код

5. Отмена слияния

git revert -m 1 _hash_ 

Заново слить не получится
В main получится слить только новые изменения

Чтобы слить старые изменения, нужно создать новую ветку из той, слияние с которой было отменено. Далее сделать коммит, перейти в main и сделать слияние


6. git stash - спрятать незакомиченные изменения
полезно, когда надо переключиться на др ветку, но не нужно делать при этом коммит в старой

git stash save _name_ - назвать спрятанные изменения
git stash pop - вернуть последние спрятанные изменения в любой ветке
git stash list - показать все спрятанные изменения
git stash apply stash@{n} - возвратить спрятанное изменение по номеру n в списке
git stash clear - очистить лист стэша