1. Команды в терминале можно указывать сразу списком, разделяя двумя амперсандами &&

2. Копирование
команда cp (copy-paste)
Указывается путь к файлу, который нужно скопировать и путь к файлу, куда нужно скопировать
cp что_копируем /куда_копируем
cp index.html /src

Можно указать сразу несколько файлов
cp index.html style.css script.js /src

3. Перемещение

mv (move) - переместить. синтаксис аналогичен, только точка слэш ./


4. Просмотр содержимого
cat (catenate) - выводит в терминал содержимое текстового файла
cat index.html

Работает только с файлами с текстом

ключ -n добавляет нумерацию строк:
cat -n index.html
ключ -s удаляет повторяющиеся строки

5. Редактирование файлов
Vim - текстовый редактов внутри командной строки Bash
Работает в 3 режимах:
1) командный режим
2) режим редактирования
3) режим просмотра

Вызывается через git commit (без других ключей)
По умолчанию открывается в режиме просмотра


*чтоюы выйти из Vim, нужно нажать esc (переключиться в командный режим) и ввести :q! + enter


[ВООБЩЕ НЕ ПОНЯЛ: редактирование файлов через Vim]
Спросить в слаке, если у меня открывается VSC автоматически, могу ли я вводить команды

Команды:
esc - перейти в командный режим
i - перейти в командный режим для редактирования
esc и :q! - выйти без сохранения
esc и :wq - выйти с сохранением


6. Для гит пустая папка - отсутствующая папка
Чтобы он её увидел, нужно создать в ней пустой файл с именем .gitkeep

7. Лог - история всех изменений репозитория
(закомиченных)
git log (вызывается из проекта)
q - закрыть логи

Длинная строка из букв и цифр - хэш коммита (hash)
*Хеширование - это преобразование любых данных в уникальную строку, или hash

Гит расчитывает хэш для любой операции. Все хэши сохраняет в различные файлы в директории .git

8. git diff (difference) - какие изменения в коммите были: что и в каких файлах
q - выход из просмотра
знак - показывает что было (пустота - ничего не было)
знак + показывает что стало

*git diff показывет только изменения, не добавленные в stage (git add)

git diff --staged - посмотреть изменения, добавленные в staged

git log --oneline - вызов коротких логов
Короткие логи (7 символов и название) нужны для сравнения коммитов с помощью:

git diff _log1_ _log2_       !!!!!!!!!!!


9. Исправить коммит
git commit --ammend (ammend - внести изменения) - добавить изменения к старому (предыдущему) коммиту (чтобы не создавать множество коммитов) 

Изменения делаются через Vim, поэтому я опять ничего не понял

10. Откатиться
git reset - вернуться к последнему коммиту
git reset HEAD - не затрагивает фалы, с которыми вы работаете (не переведён в staged) (менее радикальный способ)
при этом все файлы, находящиеся в staged, будут оттуда удалены и заменены на последний коммит
Переводит файлы из staged в untracked, но при этом не трогает другие untracked файлы

git reset --hard _commit-n_
удаляет все изменения из staged и из рабочей зоны
возвращает к определённому коммиту

(а можно ли вернуться к опред коммиту назад, а потом вернуться к опред коммиту назад в будущее?)

11. Вся история проекта хранится в папке .git
