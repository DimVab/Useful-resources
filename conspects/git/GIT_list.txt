Гит - система контроля версий

Функции:
1) сохранение разных версий
2) удобство для работы в команде
Для работы используется терминал Git Bash

Используются
1) Локальный репозиторий (свой компьютер)
2) и удалённый репозиторий в интернете (например, GitHub)
 
Git - софт (программа) для контроля версий файлов
GitHub:
- крупнейший сервис (облачная платформа) хостинга IT-проектов
- сайт для совместной разработки с использованием системы "Гит" (в тч open source - проектов)
- социальная сеть для разработчиков
- GitHub Pages - бесплатный хостинг сайтов

 
Горячие клавиши:
1) Ctrl + A - перейти в начало строки
2) Ctrl + E - перейти в конец строки
3) Стрелка вверх/вниз - перейти к предыдущим/последней командам из буфера
4) Tab (x2) - показывает все команды, начинающиеся с напечатанных символов
5) / + Tab (x2) - показывает папки, которые лежат в корневой директории
6) cd + Tab - дописывает адрес по первым буквам


Команды командной строки:
1) cd (change directory) - переход в папку
(* если в названии папки есть пробелы, то писать название в кавычках)
1.1) .. либо ../ - переход на уровень выше
1.2) cd ~    - переход в домашнюю директорию
1.3) можно писать cd ~/desktop/...
2) pwd (print working directory) - покажи рабочую папку
3) ls (list directory contents) - вывести список содержимого каталога
4) mkdir - создание папки
5) touch - создание файла
5.1) можно создать несколько файлов или папок, перечислив их без запятой
6) rm (remove) - удалить файл
7) rmdir - удалить папку
8) rm -r (с ключом -r) - удаление папки с файлами
(удаление rm и rmdir необратимо, они идут мимо корзины)
9) cp (copy-paste) - копировать. Указывается путь к файлу, кот копируется и путь, куда нужно вставить
cp что_копируем /куда_копируем
10) mv (move) - переместить. синтаксис аналогичен, только точка слэш ./
10.1) либо git mv _name_.abc _куда_
11) cat (catenate) - выводит в терминал содержимое текстового файла
ключ -n указывает нумерацию строк
ключ -s удаляет повторяющиеся строки

*можно начать писать путь и нажимать TAB, чтобы путь заполнялся дальше автоматически


Команды GIT:
1) git --version    - проверка версий
2) git init - инициализирование гит-репозитория (гит начнёт отслеживать все изменения внутри директории, в которой вы сейчас находитесь)
3) git config --global user.name "..." - указать имя (либо почту, тогда  вместо user.name - user.email) (--global - опция)
4) git config --list  - выводит список всех свойств конфига

5) git status - статус репозитория (ветки, коммиты, отслеживаемые файлы)
5.1) git status -sb - краткий статус
6) git add _name_.abc  - добавить файл к отслеживаемым
6.1) git add --all    либо
     git add -A   - добавить все файлы к отслеживаемым
     git add .  - добавить все файлы текущего каталога

7) git restore _name_.abc  - отменить изменения
7.1) git checkout _name_.abc - тоже самое
* работают до того как добавлены в отслеживаемые. (+ вроде как не работают с -А)
7.2) git restore --staged _name_.abc - убрать файл из отслеживаемых
7.3) git reset _name_.abc / либо git reset HEAD _name_.abc - убрать файл из отслеживаемых

8) git commit -m "comment" - сделать коммит (сохранить новую версию файла) (-m - опция message)
8.1) git commit --ammend - добавить изменения в последний коммит (либо git commit --ammend -m "...")
8.2) git commit -a - добавить в отслеживаемые+сделать коммит
либо git commit -a -m "..."
8.3) git revert HEAD --no-edit - удалить последний коммит
8.3.1) git revert -m 1 _hash_ - отменить коммит/слияние (-m 1 указывает, какой из родителей - основная ветка и будет сохранён. указав 1, сохранится main и отменятся изменения, внесённые другой веткой)
8.3.2) git revert _hash_ - откатывает изменения коммита
8.4) git reset #hash/tag/branch - удалить все коммиты до указываемого
8.5) git reset --hard _hash_ - удалить все коммиты до указываемого + все изменения в отслеживаемых

8.6) git stash - спрятать незакомиченные изменения
8.7) git stash save _name_ - назвать спрятанные изменения
8.8) git stash pop - вернуть последние спрятанные изменения в любой ветке
8.9) git stash list - показать все спрятанные изменения
8.10) git stash apply stash@{n} - возвратить спрятанное изменение по номеру n в списке
8.11) git stash clear - очистить лист стэша 

9) git log - история коммитов
9.1) q - закрыть логи
9.2) git log --online - короткие логи
9.3) git log --pretty=oneline - полукороткие логи (с длинными числами)
9.4) ещё ключи:
--max-count=2 (или другое число)
--since='5 minutes ago'
--until='5 minutes ago'
--author=<name>
--pretty="..." - определяет формат ввода
%h - укороченный хэш коммита 
%d - дополнения коммита (головы веток или тэги)
%ad - дата коммита
%s - комментарий
%an - имя автора
--graph - отображает дерево коммитов в виде ASCII-графика
--date=short - короткий вид даты
--all - просмотр истории всех веток

Пример:
$ git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short
Будет: * fa3c141 2011-03-09 | Added HTML header (HEAD, master) [author_name]

10) git remote add _name_ url - привязать удалённый репозиторий к локальному, указав имя репозитория и url-адрес (нужно находиться в папке с локальным репозиторием)
Имя репозитория лучше указывать origin. Оно не обязательно должно совпадать с именем репозитория на Гитхабе
10.1) git remote show origin - показать инф об оригинальном репозитории
10.2) git remote add shared ../_project1_.git - добавить чистый репозиторий в качестве удалённого репозитория
11) git push -u origin main - загрузить код на Гитхаб
12) git pull - загрузить проект с изменениями с удалённого репозитория (все изменения сольются в вашу рабочую ветку)
12.1) git fetch - загрузить проект с изменениями с удалённого репозитория без слияния с рабочей веткой (видимо появятся другие ветки)
13) git clone _url_ - клонирование (копирование) к себе на компьютер готовый проект. URL-адрес должен обязательно заканчиваться на .git
- либо клонирование с локального репозитория git clone _project1_ _cloned_project1_
(* это делаешь сразу же на новом месте работы)
13.1) git clone --bare _project1_ _project1_.git - создание чистого репозитория
14) git diff (difference) - какие изменения в коммите были: что и в каких файлах
14.1) git diff --staged - помсотрeть изменения, добавленные в stage
14.2) git diff _log1_ _log2_ - сравнение 2-х логов
15) git reset - вернуться к последнему коммиту

16) git branch - просмотр веток
16.1) git branch _name_ - создать ветку с именем name
16.2) git branch -a  - просмотр всех веток в локальном репозитории
16.3) git branch --track _new-branch_ origin/_old-branch_  - новая  ветка будет ослеживать удалённую ветку
17) git checkout _name-branch_ - переключиться на другую ветку
17.1) git checkout -b _name-branch_ - создать ветку и сразу переключиться на неё
17.2) git checkout _hash-log_ - переместиться в коммит по номеру хэша и создать ему отдельную ветку
18) git merge _branch-name_ - слияние веток
18.1) git rebase - перебазирование изменений из одной ветки в другую
19) git branch -D _branch-name_ - удалить ветку

20) (!!!) gitk - инструмент для просмотра истории изменений

21) git config --global alias.st status - созднание алиаса
21.1) alias gs='git status ' - создание короткого алиаса

22) git tag _name_ - создать тэг для версии страницы (вместо хэша)
22.1) git checkout _tag-name_ - переключение в новую ветку по имени тэга
22.2) git checkout v1^~1 (либо другая цифра) - переключение на коммит, предшествующий текущему на число
22.3) git checkout v1^ - переключение на предыдущую версию
22.4) git tag - просмотр всех тэгов
22.5) git tag -d _name_ - удалить тэг

23) git cat-file -t _hash_ - выводит тип хэша
23.1) git cat-file -p _hash_ - выводит объект коммита (tree, parent, author, committer)

24) git daemon --verbose --export-all --base-path=.    - запуск git сервера

untracked files - неотслеживаемые файлы. Их нельзя сохранить. Подсвечены красным
Отслеживаемые файлы подсвечены зелёным

modified - отслеживаемые и изменённые файлы

коммит - сохранение файла (сделать коммит). Сохранятся отслеживаемые файлы 

Коммиты стоит называть так, чтобы понять, какие изменения были сделаны ("исправлен баг в вёрстке", "обновлены стили" и тп)

Основная ветка называется main (раньше - master)

Клонировать можно любой публичный репозиторий.
Запушить можно только свой либо если есть права на пуш от владельца репозитория.
